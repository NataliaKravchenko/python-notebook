Jupyter Notebook
myproject.py

#REACH # a.
import numpy as np
import pandas as pd
import pandas as pd
df=pd.read_csv(r"C:\Users\Nat\Downloads\housing (1).data",
                      sep='\\s+')
shape
df.shape
(505, 14)
df.head(5)
df.head(5)
0.00632	18.00	2.310	0	0.5380	6.5750	65.20	4.0900	1	296.0	15.30	396.90	4.98	24.00
0	0.02731	0.0	7.07	0	0.469	6.421	78.9	4.9671	2	242.0	17.8	396.90	9.14	21.6
1	0.02729	0.0	7.07	0	0.469	7.185	61.1	4.9671	2	242.0	17.8	392.83	4.03	34.7
2	0.03237	0.0	2.18	0	0.458	6.998	45.8	6.0622	3	222.0	18.7	394.63	2.94	33.4
3	0.06905	0.0	2.18	0	0.458	7.147	54.2	6.0622	3	222.0	18.7	396.90	5.33	36.2
4	0.02985	0.0	2.18	0	0.458	6.430	58.7	6.0622	3	222.0	18.7	394.12	5.21	28.7
df.columns = ['crime_rate','<25,000 sq.ft','non-ret_buz','riv_tract','nox_conc','num_rooms','age_built<1940',
              'dist_empl','acc_highway','prop_tax','pup-teach_ratio','black','low_pop','price']
df.head(5)
crime_rate	<25,000 sq.ft	non-ret_buz	riv_tract	nox_conc	num_rooms	age_built<1940	dist_empl	acc_highway	prop_tax	pup-teach_ratio	black	low_pop	price
0	0.02731	0.0	7.07	0	0.469	6.421	78.9	4.9671	2	242.0	17.8	396.90	9.14	21.6
1	0.02729	0.0	7.07	0	0.469	7.185	61.1	4.9671	2	242.0	17.8	392.83	4.03	34.7
2	0.03237	0.0	2.18	0	0.458	6.998	45.8	6.0622	3	222.0	18.7	394.63	2.94	33.4
3	0.06905	0.0	2.18	0	0.458	7.147	54.2	6.0622	3	222.0	18.7	396.90	5.33	36.2
4	0.02985	0.0	2.18	0	0.458	6.430	58.7	6.0622	3	222.0	18.7	394.12	5.21	28.7
#REACH # b.
df.describe()
crime_rate	<25,000 sq.ft	non-ret_buz	riv_tract	nox_conc	num_rooms	age_built<1940	dist_empl	acc_highway	prop_tax	pup-teach_ratio	black	low_pop	price
count	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000	505.000000
mean	3.620667	11.350495	11.154257	0.069307	0.554728	6.284059	68.581584	3.794459	9.566337	408.459406	18.461782	356.594376	12.668257	22.529901
std	8.608572	23.343704	6.855868	0.254227	0.115990	0.703195	28.176371	2.107757	8.707553	168.629992	2.162520	91.367787	7.139950	9.205991
min	0.009060	0.000000	0.460000	0.000000	0.385000	3.561000	2.900000	1.129600	1.000000	187.000000	12.600000	0.320000	1.730000	5.000000
25%	0.082210	0.000000	5.190000	0.000000	0.449000	5.885000	45.000000	2.100000	4.000000	279.000000	17.400000	375.330000	7.010000	17.000000
50%	0.259150	0.000000	9.690000	0.000000	0.538000	6.208000	77.700000	3.199200	5.000000	330.000000	19.100000	391.430000	11.380000	21.200000
75%	3.678220	12.500000	18.100000	0.000000	0.624000	6.625000	94.100000	5.211900	24.000000	666.000000	20.200000	396.210000	16.960000	25.000000
max	88.976200	100.000000	27.740000	1.000000	0.871000	8.780000	100.000000	12.126500	24.000000	711.000000	22.000000	396.900000	37.970000	50.000000
r
#REACH # c.
corr_matrix=df.corr()
print(corr_matrix)
                 crime_rate  <25,000 sq.ft  non-ret_buz  riv_tract  nox_conc  \
crime_rate         1.000000      -0.200283     0.406251  -0.056132  0.420934
<25,000 sq.ft     -0.200283       1.000000    -0.534022  -0.042550 -0.516574
non-ret_buz        0.406251      -0.534022     1.000000   0.062350  0.764556
riv_tract         -0.056132      -0.042550     0.062350   1.000000  0.091134
nox_conc           0.420934      -0.516574     0.764556   0.091134  1.000000
num_rooms         -0.218978       0.311835    -0.391330   0.091497 -0.302127
age_built<1940     0.352701      -0.569524     0.645543   0.086461  0.731461
dist_empl         -0.379627       0.664395    -0.708848  -0.099109 -0.769221
acc_highway        0.625396      -0.311717     0.594167  -0.007907  0.611758
prop_tax           0.582568      -0.314351     0.720561  -0.035965  0.668141
pup-teach_ratio    0.289394      -0.391713     0.380955  -0.122570  0.188918
black             -0.384839       0.175319    -0.356506   0.049040 -0.380006
low_pop            0.455329      -0.412894     0.602737  -0.054576  0.591262
price             -0.388249       0.360393    -0.484126   0.175364 -0.427295

                 num_rooms  age_built<1940  dist_empl  acc_highway  prop_tax  \
crime_rate       -0.218978        0.352701  -0.379627     0.625396  0.582568
<25,000 sq.ft     0.311835       -0.569524   0.664395    -0.311717 -0.314351
non-ret_buz      -0.391330        0.645543  -0.708848     0.594167  0.720561
riv_tract         0.091497        0.086461  -0.099109    -0.007907 -0.035965
nox_conc         -0.302127        0.731461  -0.769221     0.611758  0.668141
num_rooms         1.000000       -0.240211   0.205170    -0.209277 -0.291680
age_built<1940   -0.240211        1.000000  -0.747872     0.456232  0.506527
dist_empl         0.205170       -0.747872   1.000000    -0.494798 -0.534492
acc_highway      -0.209277        0.456232  -0.494798     1.000000  0.910202
prop_tax         -0.291680        0.506527  -0.534492     0.910202  1.000000
pup-teach_ratio  -0.355116        0.261724  -0.232561     0.463322  0.460100
black             0.127754       -0.273486   0.291451    -0.444065 -0.441505
low_pop          -0.613734        0.602782  -0.497277     0.487608  0.543435
price             0.695365       -0.376932   0.249896    -0.381690 -0.468543

                 pup-teach_ratio     black   low_pop     price
crime_rate              0.289394 -0.384839  0.455329 -0.388249
<25,000 sq.ft          -0.391713  0.175319 -0.412894  0.360393
non-ret_buz             0.380955 -0.356506  0.602737 -0.484126
riv_tract              -0.122570  0.049040 -0.054576  0.175364
nox_conc                0.188918 -0.380006  0.591262 -0.427295
num_rooms              -0.355116  0.127754 -0.613734  0.695365
age_built<1940          0.261724 -0.273486  0.602782 -0.376932
dist_empl              -0.232561  0.291451 -0.497277  0.249896
acc_highway             0.463322 -0.444065  0.487608 -0.381690
prop_tax                0.460100 -0.441505  0.543435 -0.468543
pup-teach_ratio         1.000000 -0.176515  0.372148 -0.508411
black                  -0.176515  1.000000 -0.365637  0.333394
low_pop                 0.372148 -0.365637  1.000000 -0.738187
price                  -0.508411  0.333394 -0.738187  1.000000
corr_matrix.sort_values('price')
#REACH # d.
# I would go with the prediction of factors that impact the property price.
corr_matrix.sort_values('price')
crime_rate	<25,000 sq.ft	non-ret_buz	riv_tract	nox_conc	num_rooms	age_built<1940	dist_empl	acc_highway	prop_tax	pup-teach_ratio	black	low_pop	price
low_pop	0.455329	-0.412894	0.602737	-0.054576	0.591262	-0.613734	0.602782	-0.497277	0.487608	0.543435	0.372148	-0.365637	1.000000	-0.738187
pup-teach_ratio	0.289394	-0.391713	0.380955	-0.122570	0.188918	-0.355116	0.261724	-0.232561	0.463322	0.460100	1.000000	-0.176515	0.372148	-0.508411
non-ret_buz	0.406251	-0.534022	1.000000	0.062350	0.764556	-0.391330	0.645543	-0.708848	0.594167	0.720561	0.380955	-0.356506	0.602737	-0.484126
prop_tax	0.582568	-0.314351	0.720561	-0.035965	0.668141	-0.291680	0.506527	-0.534492	0.910202	1.000000	0.460100	-0.441505	0.543435	-0.468543
nox_conc	0.420934	-0.516574	0.764556	0.091134	1.000000	-0.302127	0.731461	-0.769221	0.611758	0.668141	0.188918	-0.380006	0.591262	-0.427295
crime_rate	1.000000	-0.200283	0.406251	-0.056132	0.420934	-0.218978	0.352701	-0.379627	0.625396	0.582568	0.289394	-0.384839	0.455329	-0.388249
acc_highway	0.625396	-0.311717	0.594167	-0.007907	0.611758	-0.209277	0.456232	-0.494798	1.000000	0.910202	0.463322	-0.444065	0.487608	-0.381690
age_built<1940	0.352701	-0.569524	0.645543	0.086461	0.731461	-0.240211	1.000000	-0.747872	0.456232	0.506527	0.261724	-0.273486	0.602782	-0.376932
riv_tract	-0.056132	-0.042550	0.062350	1.000000	0.091134	0.091497	0.086461	-0.099109	-0.007907	-0.035965	-0.122570	0.049040	-0.054576	0.175364
dist_empl	-0.379627	0.664395	-0.708848	-0.099109	-0.769221	0.205170	-0.747872	1.000000	-0.494798	-0.534492	-0.232561	0.291451	-0.497277	0.249896
black	-0.384839	0.175319	-0.356506	0.049040	-0.380006	0.127754	-0.273486	0.291451	-0.444065	-0.441505	-0.176515	1.000000	-0.365637	0.333394
<25,000 sq.ft	-0.200283	1.000000	-0.534022	-0.042550	-0.516574	0.311835	-0.569524	0.664395	-0.311717	-0.314351	-0.391713	0.175319	-0.412894	0.360393
num_rooms	-0.218978	0.311835	-0.391330	0.091497	-0.302127	1.000000	-0.240211	0.205170	-0.209277	-0.291680	-0.355116	0.127754	-0.613734	0.695365
price	-0.388249	0.360393	-0.484126	0.175364	-0.427295	0.695365	-0.376932	0.249896	-0.381690	-0.468543	-0.508411	0.333394	-0.738187	1.000000
#from this sorting, there are some very obvious findings, like the highest negative correlation with the percentage of
#population lower status and the highest positive with the number of rooms. Surprisingly, for me was that pupil-teacher
#ratio has high negative correlation with the housing price. So, fewer schools, higher prices. Also, wealthy districts
#do not have a lot of non-retail businesses. As for positive correlation, the proportion of the black population
#correlates positively with the price. A very good example of cultural equity for 1980.
#I am also interested in finding regions with the lowest crime rate and high number of schools that are suitable
#for families with kids
selection=df[['crime_rate','pup-teach_ratio']]
low_crime_rate=selection.sort_values('crime_rate')
print(low_crime_rate.head(10))
â€‹
     crime_rate  pup-teach_ratio
283     0.00906             15.3
284     0.01096             15.3
340     0.01301             15.5
54      0.01311             17.9
53      0.01360             21.1
194     0.01381             14.4
56      0.01432             15.1
193     0.01439             15.6
347     0.01501             17.0
282     0.01501             13.6
# Finding regions with low crime rates, many teachers, low property tax and accessibility to highways
df['crime_rate'].mean()
3.620666534653466
df['pup-teach_ratio'].mean()
18.461782178217845
df['prop_tax'].mean()
408.4594059405941
df['acc_highway'].mean()
9.566336633663367
 &
low_crime_rate=df['crime_rate']<3.62
many_teachers=df['pup-teach_ratio']<18.46
low_property_tax=df['prop_tax']<408.46
many_highways=df['acc_highway']>9.57
df[low_crime_rate & many_teachers & low_property_tax & many_highways]
crime_rate	<25,000 sq.ft	non-ret_buz	riv_tract	nox_conc	num_rooms	age_built<1940	dist_empl	acc_highway	prop_tax	pup-teach_ratio	black	low_pop	price
# No rows to display. It is hard to find a good place in Boston suburbs!

